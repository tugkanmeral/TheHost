@page "/password"
@using Models
@inject HttpClient Http
@inject IJSRuntime JsRuntime
@inject StateContainer StateContainer

<PageTitle>Password</PageTitle>

<h1>Passwords</h1>


@if (passwords == null)
{
    <p><em>Passwords loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th />
                <th>Title</th>
                <th>Detail</th>
                <th>Username</th>
                <th>Pass</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var password in passwords)
            {
                var pass = password;
                <tr>
                    <td>
                        <button class="btn" @onclick="@(e => getPassword(pass.Id))">
                            <span class="oi oi-pencil" aria-hidden="true" />
                        </button>
                    </td>
                    <td>@password.Title</td>
                    <td>@password.Detail</td>
                    <td>@password.Username</td>
                    <td>@password.Pass</td>
                </tr>
            }
        </tbody>
    </table>
}
<br />

<div class="input-group mb-3">
    <div class="input-group-prepend">
        <span class="input-group-text" id="password-title">Title</span>
    </div>
    <input type="text" class="form-control" placeholder="Title" aria-label="Title" aria-describedby="password-title"
        @bind="PasswordItem.Title" disabled="@IsTitleDisabled" />
</div>
<div class="input-group mb-3">
    <div class="input-group-prepend">
        <span class="input-group-text" id="password-username">Username</span>
    </div>
    <input type="text" class="form-control" placeholder="Username" aria-label="Username"
        aria-describedby="password-username" @bind="PasswordItem.Username" disabled="@IsUsernameDisabled">
</div>
<div class="input-group mb-3">
    <div class="input-group-prepend">
        <span class="input-group-text" id="password-pass">Password</span>
    </div>
    <input type="password" class="form-control" placeholder="Password" aria-label="Password"
        aria-describedby="password-pass" @bind="PasswordItem.Pass" id="password-password-input">
</div>
<div class="input-group mb-3">
    <div class="input-group-prepend">
        <span class="input-group-text" id="password-detail">Detail</span>
    </div>
    <input type="text" class="form-control" placeholder="Detail" aria-label="Detail" aria-describedby="password-detail"
        @bind="PasswordItem.Detail">
</div>

<button class="btn btn-primary" @onclick="upsert">Save</button>
<button class="btn btn-default" @onclick="cancel">Cancel</button>
<button class="btn btn-warning" @onclick="copy">Copy</button>

@code {
    private Models.Password[]? passwords;
    private Models.Password password = new Models.Password();
    public Models.Password PasswordItem
    {
        get
        {
            return password;
        }
        set
        {
            password = value;
            setInputsDisability();
        }
    }
    private bool IsTitleDisabled = false;
    private bool IsUsernameDisabled = false;

    protected override async Task OnInitializedAsync()
    {
        if (!String.IsNullOrWhiteSpace(StateContainer.Token))
        {
            await getPasswords();
        }
    }

    private async Task upsert()
    {
        var model = new PasswordUpsertModel()
        {
            Id = PasswordItem?.Id,
            Title = PasswordItem?.Title,
            Detail = PasswordItem?.Detail,
            Pass = PasswordItem?.Pass,
            Username = PasswordItem?.Username
        };

        HttpResponseMessage response;
        if (String.IsNullOrWhiteSpace(model.Id))
            response = await Http.PostAsJsonAsync("https://localhost:7109/api/passwords", model);
        else
            response = await Http.PutAsJsonAsync("https://localhost:7109/api/passwords/" + model.Id, model);

        if (response.IsSuccessStatusCode)
            await getPasswords();
    }

    private async Task getPasswords() => passwords = await
    Http.GetFromJsonAsync<Models.Password[]>("https://localhost:7109/api/passwords");


    private async Task getPassword(string id)
    {
        var response = await Http.GetFromJsonAsync<Models.Password>("https://localhost:7109/api/passwords/" + id);
        if (response != null)
            PasswordItem = response;
    }

    private void cancel() => PasswordItem = new Models.Password();

    private async Task copy() => await JsRuntime.InvokeVoidAsync("copyClipboard");

    private void setInputsDisability()
    {
        if (String.IsNullOrWhiteSpace(PasswordItem.Id))
        {
            IsTitleDisabled = false;
            IsUsernameDisabled = false;
        }
        else
        {
            IsTitleDisabled = true;
            IsUsernameDisabled = true;
        }
    }
}
