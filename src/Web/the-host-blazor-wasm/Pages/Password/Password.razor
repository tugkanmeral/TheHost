@page "/password"
@using Models
@inject HttpClient Http
@inject IJSRuntime JsRuntime
@inject StateContainer StateContainer
@inject NavigationManager NavigationManager

<PageTitle>Password</PageTitle>

<h1>Passwords</h1>


@if (passwords == null)
{
    <p><em>Passwords loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>
                    <button class="btn" @onclick="@(async () => await openNewPasswordModal())">
                        <span class="oi oi-plus" aria-hidden="true" />
                    </button>
                </th>
                <th>Title</th>
                <th>Detail</th>
                <th>Username</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var password in passwords)
            {
                var pass = password;
                <tr>
                    <td>
                        <button class="btn" @onclick="@(e => getPassword(pass.Id))">
                            <span class="oi oi-pencil" aria-hidden="true" />
                        </button>
                    </td>
                    <td>@password.Title</td>
                    <td>@(String.IsNullOrWhiteSpace(password.Detail) ? "-" : password.Detail)</td>
                    <td>@password.Username</td>
                </tr>
            }
        </tbody>
    </table>
    <nav>
        <ul class="pagination">
            @if (!isPreviousPageBtnDisabled)
            {
                <li class="page-item" @onclick="previousPage"><a class="page-link" style="cursor: pointer;">Previous</a></li>
            }
            else
            {
                <li class="page-item"><a class="page-link" style="color: grey;">Previous</a></li>
            }

            <li class="page-item disabled"><a class="page-link">@currentPage</a></li>

            @if (!isNextPageBtnDisabled)
            {
                <li class="page-item" @onclick="nextPage"><a class="page-link" style="cursor: pointer;">Next</a></li>
            }
            else
            {
                <li class="page-item"><a class="page-link" style="color: grey;">Next</a></li>
            }
        </ul>
    </nav>
}

<!-- Modal -->
<div class="modal fade" id="passwordDetailModal" tabindex="-1" role="dialog" aria-labelledby="passwordDetailModalLabel"
    aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="passwordDetailModalLabel">@(String.IsNullOrWhiteSpace(PasswordItem.Title) ?
                    "New password"
                    :PasswordItem.Title)</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <h6>Title</h6>
                <input type="text" class="form-control" placeholder="Title" @bind="PasswordItem.Title"
                    disabled="@isTitleDisabled" />
                <br />
                <h6>Username</h6>
                <input type="text" class="form-control" placeholder="Username" @bind="PasswordItem.Username"
                    disabled="@isUsernameDisabled">
                <br />
                <h6>Password</h6>
                <input type="password" class="form-control" placeholder="Password" @bind="PasswordItem.Pass"
                    id="password-password-input">
                <br />
                <h6>Detail</h6>
                <input type="text" class="form-control" placeholder="Detail" @bind="PasswordItem.Detail">
                <br />
            </div>
            <div class="modal-footer">
                <button class="btn btn-primary" @onclick="upsert">Save</button>
                <button class="btn btn-warning" @onclick="copy" disabled="@isCopyBtnDisabled">Copy</button>
                <button class="btn btn-danger" @onclick="@(e => delete(password.Id))"
                    disabled="@isDeleteBtnDisabled">Delete</button>
                <button class="btn btn-default" @onclick="(async () => await cancel())">Cancel</button>
            </div>
        </div>
    </div>
</div>

@code {
    private Models.Password[]? passwords;
    private Models.Password password = new Models.Password();
    private string? passwordGetUrl;
    private string? passwordsGetUrl;
    private string? passwordInsertUrl;
    private string? passwordUpdateUrl;
    private string? passwordDeleteUrl;
    private bool isTitleDisabled = false;
    private bool isUsernameDisabled = false;
    private bool isCopyBtnDisabled = false;
    private bool isDeleteBtnDisabled = false;
    private bool isPreviousPageBtnDisabled = true;
    private bool isNextPageBtnDisabled = true;

    private int skip = 0;
    private int take = 5;
    private int currentPage = 0;
    private long totalPasswordCount = 0;
    private long totalPageCount = 0;

    public Models.Password PasswordItem
    {
        get
        {
            return password;
        }
        set
        {
            password = value;
            setInputsDisability();
            setButtonsDisability();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        getRoutes();

        if (!String.IsNullOrWhiteSpace(StateContainer.Token))
        {
            await getPasswords();
        }

        setInputsDisability();
        setButtonsDisability();
    }

    private async Task upsert()
    {
        if (PasswordItem?.Pass == null)
            return;

        var encryptedPass = await JsRuntime.InvokeAsync<string>("aesGcmEncrypt", PasswordItem?.Pass,
        StateContainer.MasterKey,
        StateContainer.IV
        );

        var model = new PasswordUpsertModel()
        {
            Id = PasswordItem?.Id,
            Title = PasswordItem?.Title,
            Detail = PasswordItem?.Detail,
            Pass = encryptedPass,
            Username = PasswordItem?.Username
        };

        HttpResponseMessage response;
        if (String.IsNullOrWhiteSpace(model.Id))
            response = await Http.PostAsJsonAsync(passwordInsertUrl, model);
        else
            response = await Http.PutAsJsonAsync(passwordUpdateUrl + model.Id, model);

        if (response.IsSuccessStatusCode)
            await getPasswords();

        await cancel();
    }

    private async Task delete(string? id)
    {
        if (String.IsNullOrWhiteSpace(id))
            return;

        var response = await Http.DeleteAsync(passwordDeleteUrl + id);

        if (response.IsSuccessStatusCode)
            await getPasswords();

        await cancel();
    }

    private async Task openNewPasswordModal()
    {
        PasswordItem = new Models.Password();
        await JsRuntime.InvokeVoidAsync("modalAction", "#passwordDetailModal", "show");
    }

    private async Task cancel()
    {
        PasswordItem = new Models.Password();
        await JsRuntime.InvokeVoidAsync("modalAction", "#passwordDetailModal", "hide");
    }

    private async Task copy() => await JsRuntime.InvokeVoidAsync("copyClipboard");

    private async Task getPasswords()
    {
        var passwordsGetUrlWParameter = passwordsGetUrl + "?skip=" + skip + "&take=" + take;
        var passwordsModel = await Http.GetFromJsonAsync<Models.PasswordsResponseModel>(passwordsGetUrlWParameter);
        passwords = passwordsModel?.Items;
        currentPage = (skip / take) + 1;
        totalPasswordCount = passwordsModel?.TotalItemCount ?? 0;
        totalPageCount = totalPasswordCount / take;

        setPaginationBtnsDisability();
    }

    private void setPaginationBtnsDisability()
    {
        if (currentPage <= 1)
            isPreviousPageBtnDisabled = true;
        else
            isPreviousPageBtnDisabled = false;

        if (currentPage > totalPageCount)
            isNextPageBtnDisabled = true;
        else
            isNextPageBtnDisabled = false;
    }

    private async Task getPassword(string id)
    {
        var response = await Http.GetFromJsonAsync<Models.Password>(passwordGetUrl + id);
        if (response != null)
            PasswordItem = response;

        string decryptedPass = string.Empty;
        try
        {
            decryptedPass = await JsRuntime.InvokeAsync<string>("aesGcmDecrypt", PasswordItem.Pass,
            StateContainer.MasterKey,
            StateContainer.IV);

            PasswordItem.Pass = decryptedPass;

            await JsRuntime.InvokeVoidAsync("modalAction", "#passwordDetailModal", "show");
        }
        catch (NullReferenceException)
        {
            await JsRuntime.InvokeVoidAsync("alert", "MasterKey alınamadı lütfen tekrar giriş yap!");
            var localStorageManager = new LocalStorageManager(JsRuntime);

            await localStorageManager.ClearAsync();
            StateContainer.Token = String.Empty;

            StateHasChanged();
            NavigationManager.NavigateTo("/Login");
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeVoidAsync("console.error", ex.Message);
        }
    }

    private void setInputsDisability()
    {
        if (String.IsNullOrWhiteSpace(PasswordItem.Id))
        {
            isTitleDisabled = false;
            isUsernameDisabled = false;
        }
        else
        {
            isTitleDisabled = true;
            isUsernameDisabled = true;
        }
    }

    private void setButtonsDisability()
    {
        if (String.IsNullOrWhiteSpace(PasswordItem.Id))
        {
            isCopyBtnDisabled = true;
            isDeleteBtnDisabled = true;
        }
        else
        {
            isCopyBtnDisabled = false;
            isDeleteBtnDisabled = false;
        }
    }

    private void getRoutes()
    {
        var passwordServiceRoute = StateContainer.Routes?.Where(x => x.Service == "Password").SingleOrDefault();

        if (passwordServiceRoute == null)
            return;

        passwordGetUrl = getRoute(passwordServiceRoute, "password");
        passwordsGetUrl = getRoute(passwordServiceRoute, "passwords");
        passwordInsertUrl = getRoute(passwordServiceRoute, "passwordInsert");
        passwordUpdateUrl = getRoute(passwordServiceRoute, "passwordUpdate");
        passwordDeleteUrl = getRoute(passwordServiceRoute, "passwordDelete");
    }

    private string getRoute(TheHostRouteModel theHostRoute, string routeName)
    {
        return theHostRoute.Url + theHostRoute.EndPoints.Where(x => x.Name == routeName).Single()?.Url;
    }

    private async Task previousPage()
    {
        if (skip - take < 0)
            return;

        skip -= take;
        await getPasswords();
    }

    private async Task nextPage()
    {
        if (currentPage > totalPageCount)
            return;

        skip += take;
        await getPasswords();
    }
}
