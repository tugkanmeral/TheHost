@page "/login"
@using System.Net.Http.Headers
@inject IJSRuntime JsRuntime
@inject HttpClient Http
@inject StateContainer StateContainer
@inject NavigationManager NavigationManager

<PageTitle>Login</PageTitle>
<div class="container">
    <div class="row">
        <div class="col"></div>
        <div class="col border rounded p-3">
            <h1 class="mb-3">Login</h1>
            <div class="input-group mb-3">
                <div class="input-group-prepend">
                    <span class="input-group-text" id="login-username">U</span>
                </div>
                <input type="text" class="form-control" placeholder="Username" aria-label="Username"
                    aria-describedby="login-username" @bind="Username">
            </div>
            <div class="input-group mb-3">
                <div class="input-group-prepend">
                    <span class="input-group-text" id="login-password">P</span>
                </div>
                <input type="password" class="form-control" placeholder="Password" aria-label="Password"
                    aria-describedby="login-password" @bind="Password">
            </div>
            <div class="input-group mb-3">
                <div class="input-group-prepend">
                    <span class="input-group-text" id="login-masterkey">M</span>
                </div>
                <input type="password" class="form-control" placeholder="MasterKey" aria-label="MasterKey"
                    aria-describedby="login-masterkey" @bind="MasterKey">
            </div>
            <div class="d-flex flex-column justify-content-center">
                <button class="btn btn-primary" @onclick="LoginClicked">Login</button>
            </div>
            <div class="d-flex flex-column justify-content-center">
                <button class="btn btn-link" @onclick="OpenRegisterModal">Register</button>
            </div>
        </div>
        <div class="col"></div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="userRegisterModal" tabindex="-1" role="dialog" aria-labelledby="userRegisterModalLabel"
    aria-hidden="true">
    <div class="modal-dialog modal-sm" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="userRegisterModalLabel">Register user</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <h6>Username</h6>
                <input type="text" class="form-control" placeholder="username" @bind="NewUser.Username" />
                <br />
                <h6>Password</h6>
                <input type="text" class="form-control" placeholder="password" @bind="NewUser.Password" />
                <br />
                <h6>Password (for validation)</h6>
                <input type="text" class="form-control" placeholder="password" @bind="NewUser.PassValidation" />
                <br />
            </div>
            <div class="modal-footer">
                <button class="btn btn-primary" @onclick="(async () => await Register())"
                    hidden="@(String.IsNullOrWhiteSpace(NewUser.Username) || (NewUser.Password != NewUser.PassValidation))">Save</button>
                <button class="btn btn-default" data-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>

@code {
    private LocalStorageManager? localStorageManager;
    private string? Username { get; set; }
    private string? Password { get; set; }
    private string? MasterKey { get; set; }
    private string? tokenGetUrl;
    private string? registerUrl;
    private UserRegisterModel NewUser = new();

    protected override async Task OnInitializedAsync()
    {
        localStorageManager = new LocalStorageManager(JsRuntime);

        getRoutes();

        var token = await localStorageManager.GetAsync<string>("token");
        if (!String.IsNullOrWhiteSpace(token))
        {
            StateContainer.Token = token;
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", token);
            NavigationManager.NavigateTo("/");
        }
    }

    public async Task LoginClicked()
    {
        if (String.IsNullOrWhiteSpace(Username))
            return;
        if (String.IsNullOrWhiteSpace(Password))
            return;
        if (String.IsNullOrWhiteSpace(MasterKey))
            return;

        if (localStorageManager == null)
        {
            localStorageManager = new LocalStorageManager(JsRuntime);
        }

        var loginModel = new LoginModel(Username, Password);
        var result = await Http.PostAsJsonAsync(tokenGetUrl, loginModel);
        if (!result.IsSuccessStatusCode)
            return;

        var token = await result.Content.ReadAsStringAsync();

        if (String.IsNullOrWhiteSpace(token))
            return;

        StateContainer.Token = token;
        StateContainer.MasterKey = MasterKey;

        await localStorageManager.RemoveAsync("token");
        await localStorageManager.SetAsync<string>("token", token);

        // ************** Set JWT header ****************
        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", token);
        // *******************************************************

        NavigationManager.NavigateTo("/Password");
    }

    public async void OpenRegisterModal()
    {
        await JsRuntime.InvokeVoidAsync("modalAction", "#userRegisterModal", "show");
    }

    public async Task Register()
    {
        var response = await Http.PostAsJsonAsync(registerUrl, NewUser);
        if (response.IsSuccessStatusCode)
        {
            await JsRuntime.InvokeVoidAsync("modalAction", "#userRegisterModal", "hide");
        }
    }

    private void getRoutes()
    {
        var passwordServiceRoute = StateContainer.Routes?.Where(x => x.Service == "Auth").SingleOrDefault();

        if (passwordServiceRoute == null)
            return;

        tokenGetUrl = getRoute(passwordServiceRoute, "getToken");

        var userServiceRoute = StateContainer.Routes?.Where(x => x.Service == "User").SingleOrDefault();

        if (userServiceRoute == null)
            return;

        registerUrl = getRoute(userServiceRoute, "register");
    }

    private string getRoute(TheHostRouteModel theHostRoute, string routeName)
    {
        return theHostRoute.Url + theHostRoute.EndPoints.Where(x => x.Name == routeName).Single()?.Url;
    }

    public class LoginModel
    {
        public LoginModel(string username, string password)
        {
            Username = username;
            Password = password;
        }
        public string Username { get; set; } = "";
        public string Password { get; set; } = "";
    }

    public class UserRegisterModel
    {
        public string Username { get; set; } = null!;
        public string Password { get; set; } = null!;
        public string PassValidation { get; set; } = null!;
    }
}
