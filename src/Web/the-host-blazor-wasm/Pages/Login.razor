@page "/login"
@using System.Net.Http.Headers
@inject IJSRuntime JsRuntime
@inject HttpClient Http
@inject StateContainer StateContainer
@inject NavigationManager NavigationManager

<PageTitle>Login</PageTitle>

<h1>Login</h1>
<div class="input-group mb-3">
    <div class="input-group-prepend">
        <span class="input-group-text" id="login-username">U</span>
    </div>
    <input type="text" class="form-control" placeholder="Username" aria-label="Username"
        aria-describedby="login-username" @bind="Username">
</div>
<div class="input-group mb-3">
    <div class="input-group-prepend">
        <span class="input-group-text" id="login-password">P</span>
    </div>
    <input type="password" class="form-control" placeholder="Password" aria-label="Password"
        aria-describedby="login-password" @bind="Password">
</div>
<div class="input-group mb-3">
    <div class="input-group-prepend">
        <span class="input-group-text" id="login-masterkey">M</span>
    </div>
    <input type="password" class="form-control" placeholder="MasterKey" aria-label="MasterKey"
        aria-describedby="login-masterkey" @bind="MasterKey">
</div>

<button class="btn btn-primary" @onclick="LoginClicked">Login</button>

@code {
    private LocalStorageManager? localStorageManager;
    private string? Username { get; set; }
    private string? Password { get; set; }
    private string? MasterKey { get; set; }

    protected override async Task OnInitializedAsync()
    {
        localStorageManager = new LocalStorageManager(JsRuntime);

        var token = await localStorageManager.GetAsync<string>("token");
        if (!String.IsNullOrWhiteSpace(token))
        {
            StateContainer.Token = token;
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", token);
            NavigationManager.NavigateTo("/");
        }
    }

    private async Task LoginClicked()
    {
        if (String.IsNullOrWhiteSpace(Username))
            return;
        if (String.IsNullOrWhiteSpace(Password))
            return;
        if (String.IsNullOrWhiteSpace(MasterKey))
            return;

        if (localStorageManager == null)
        {
            localStorageManager = new LocalStorageManager(JsRuntime);
        }

        var loginModel = new LoginModel(Username, Password, MasterKey);
        var result = await Http.PostAsJsonAsync("https://localhost:7244/api/auth/getToken", loginModel);
        if (!result.IsSuccessStatusCode)
            return;

        var token = await result.Content.ReadAsStringAsync();

        if (String.IsNullOrWhiteSpace(token))
            return;

        StateContainer.Token = token;

        await localStorageManager.RemoveAsync("token");
        await localStorageManager.SetAsync<string>("token", token);

        // ************** Set JWT header ****************
        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", token);
        // *******************************************************

        NavigationManager.NavigateTo("/Password");
    }

    public class LoginModel
    {
        public LoginModel(string username, string password, string masterKey)
        {
            Username = username;
            Password = password;
            MasterKey = masterKey;
        }
        public string Username { get; set; } = "";
        public string Password { get; set; } = "";
        public string MasterKey { get; set; } = "";
    }
}
